plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
}

subprojects {
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    group = "io.github.lxgaming"

    configurations {
        compileJar {
            implementation.extendsFrom(compileJar)
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation("org.jetbrains:annotations:24.1.0")
        testImplementation("org.junit.jupiter:junit-jupiter-engine:5.10.2")
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        failOnError = false
        options.addStringOption("Xdoclint:none", "-quiet")
    }

    processResources {
        if (project(":agent") != project) {
            dependsOn("copyResources")
            finalizedBy("mergeResources")
        }
    }

    publishing {
        publications {
            mavenPublication(MavenPublication) {
                groupId group
                artifactId archivesBaseName
                version version
                pom {
                    name = "Agent"
                    url = "https://github.com/LXGaming/Agent"
                    developers {
                        developer {
                            id = "lxgaming"
                            name = "LXGaming"
                        }
                    }
                    issueManagement {
                        system = "GitHub Issues"
                        url = "https://github.com/LXGaming/Agent/issues"
                    }
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/LXGaming/Agent.git"
                        developerConnection = "scm:git:https://github.com/LXGaming/Agent.git"
                        url = "https://github.com/LXGaming/Agent"
                    }
                }
            }
        }
        repositories {
            if (project.hasProperty("sonatypeUsername") && project.hasProperty("sonatypePassword")) {
                maven {
                    name = "sonatype"
                    url = version.contains("-SNAPSHOT") ? "https://s01.oss.sonatype.org/content/repositories/snapshots" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                    credentials {
                        username project.property("sonatypeUsername")
                        password project.property("sonatypePassword")
                    }
                }
            }
        }
    }

    shadowJar {
        doFirst {
            configurations = [project.configurations.compileJar]
        }

        exclude("META-INF/maven/**")
        exclude("META-INF/versions/**")
        exclude("module-info.class")
        mergeServiceFiles()
        relocate("com.typesafe.config", "io.github.lxgaming.agent.lib.config")
        relocate("org.objectweb.asm", "io.github.lxgaming.agent.lib.asm")
        relocate("org.slf4j", "io.github.lxgaming.agent.lib.slf4j")
    }

    signing {
        if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
            useInMemoryPgpKeys(project.property("signingKey"), project.property("signingPassword"))
        }

        sign publishing.publications
    }

    test {
        testLogging {
            exceptionFormat = "full"
        }

        useJUnitPlatform()
    }

    tasks.register("copyResources", Copy) {
        from project(":agent").file("src/main/resources/simplelogger.properties")
        filter { String line -> line.replace("org.slf4j", "io.github.lxgaming.agent.lib.slf4j") }
        into layout.buildDirectory.dir("resources/main")
    }

    tasks.register("mergeResources") {
        doLast {
            Set<File> files = [
                project(":agent"),
                project
            ].collect { project ->
                project.file("src/main/resources/agent.conf")
            }

            def output = layout.buildDirectory.file("resources/main/agent.conf").get().asFile
            output.getParentFile().mkdirs()
            output.newWriter().withWriter { writer ->
                writer << files.collect { file -> file.text.normalize() }.join('\n')
            }
        }
    }
}